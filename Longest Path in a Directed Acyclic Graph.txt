class Solution {
    public static int [] maximumDistance(int v, int e, int src, int[][] edges) {
        // code here
        ArrayList<Pair>[] graph = new ArrayList[v];
        
        for(int i=0;i<v;i++)
        graph[i] = new ArrayList<>();
        
        for(int []ed : edges){
            int u = ed[0];
            int ve = ed[1];
            int wt = ed[2];
            
            graph[u].add(new Pair(ve,wt));
        }
        
        boolean[] vis = new boolean[v];
        int[] dist = new int[v];
        Arrays.fill(dist,Integer.MIN_VALUE);
        
        Stack<Integer> st = new Stack<>();
        topoSort(src,graph,vis,st);
        
        dist[src] = 0;
        
        while(!st.isEmpty()){
            Integer curr = st.pop();
            
            for(Pair nbr : graph[curr]){
                if(dist[curr] + nbr.wt > dist[nbr.v]){
                    dist[nbr.v] = dist[curr] + nbr.wt;
                }
            }
        }
        
        return dist;
    }
    private static void topoSort(int ver,ArrayList<Pair>[] graph,boolean[] vis,Stack<Integer> st){
        vis[ver] = true;
        
        for(Pair nbr : graph[ver]){
            if(!vis[nbr.v])
            topoSort(nbr.v,graph,vis,st);
        }
        
        st.push(ver);
    }
}

class Pair{
    int v,wt;
    public Pair(int v,int w){
        this.v = v;
        wt = w;
    }
}  