class Solution {
   public static ArrayList<ArrayList<Integer>> findAllPossiblePaths(int n,int m, int[][] grid) {
        // code here
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        ArrayList<Integer> ls = new ArrayList<>();
        helper(grid, n, m, 0, 0, ls, ans);
        return ans;
    }
    
    public static void helper(int[][] grid, int n, int m, int i, int j, ArrayList<Integer> ls, ArrayList<ArrayList<Integer>> ans) {
        // out of boundary
        if (i >= n || j >= m) {
            return;
        }
        
        // reached our destination
        if (i == n - 1 && j == m - 1) {
            // adding last cell value to our list
            ls.add(grid[i][j]);
            
            // adding ls into ans by copying it
            ans.add(new ArrayList<>(ls));
            
            // backtracking by removing the last added element
            ls.remove(ls.size() - 1);
            
            return;
        }
        
        // add current cell
        ls.add(grid[i][j]);
        
        // going down
        helper(grid, n, m, i + 1, j, ls, ans);
        
        // going right
        helper(grid, n, m, i, j + 1, ls, ans);
        
        // backtracking
        ls.remove(ls.size() - 1);
        
        return;
    }
}