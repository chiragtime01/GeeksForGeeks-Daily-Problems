class Solution
{
    
   static class Some implements Comparator<int[]> {
        public int compare(int[] one, int[] two) {
            return one[1] - two[1];
        }
    }

    static int[] dijkstra(int v, ArrayList<ArrayList<ArrayList<Integer>>> adj, int s) {
        // Write your code here
        int[] dist = new int[v];
        for (int i = 0; i < v; i++) {
            dist[i] = Integer.MAX_VALUE;
        }
        dist[s] = 0;

        Queue<int[]> minHeap = new PriorityQueue<>(new Some());
        minHeap.offer(new int[] { s, 0 });
        while (minHeap.size() > 0) {
            //curr ~ [index, weight]
            int[] curr = minHeap.poll();
            ArrayList<ArrayList<Integer>> t = adj.get(curr[0]);
            for (var x : t) {
                //x ~ [index, weight]
                if(dist[curr[0]] + x.get(1) < dist[x.get(0)]){
                    dist[x.get(0)] = dist[curr[0]] + x.get(1);
                    minHeap.offer(new int[] { x.get(0), x.get(1) });
                }
            }
        }
        return dist;

    }
}